---
- hosts: local
  become: yes


  tasks:

    - hostname:
        name: "dino-s{{ NRSKL }}"  

    - assert:
        that:
          - "{{ NRSKL }} < 100000 "
          - "{{ NRSKL }} > 0 "
        quiet: true    
        msg: "NIEPOPRAWNY NUMER SKLEPU"
        
  
    - assert:
        that:
          - "{{ KOD_GOLD }} < 100000 "
          - "{{ KOD_GOLD }} > 0 "
        quiet: true    
        msg: "NIEPOPRAWNY NUMER W SYSTEMIE GOLD"


    - name: Sprawdzam adres sieci
      fail: msg="NIEPOPRAWNY ADRES IP"
      when: NETWORK is not match('\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')

    
    - name: Sprawdzam adres sieci
      fail: msg="NIEPOPRAWNY ADRES IP" 
      when: NETWORK | ipaddr('bool') == False


    - name: Sprawdzanie system operacyjny
      fail: msg="WYMAGANY SYSTEM OPERACYJNY TO UBUNTU 18.04 x64"
      when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version != "18" and ansible_architecture != "x86_64"


    - name: Sprawdzam katalog sklepu
      stat:
        path: "/usr/local/sklep{{ NRSKL }}"
      register: dir_s

    - fail:
        msg: "KATALOG SKLEPU ISTNIEJE"
      when: dir_s.stat.exists and dir_s.stat.isdir


    # Pobranie wzorca sklepu z serwera wewnetrznego
    - name: Step 1
      get_url:
        url: ftp://dinospexp:dinospexp123@10.80.0.14/nowysklepdino.11883.tgz
        dest: /tmp/
        force: yes
        timeout: 60
      no_log: True  
      ignore_errors: True  
      register: ftp_ok
     
    # Pobranie wzorca sklepu z naszego serwera
    - name: Step 1
      get_url:
        url: ftp://dinoftp:dInO.F^9031gG@edi.netis.pl/nowysklepdino.11883.tgz
        dest: /tmp/
        force: yes
        timeout: 60
      no_log: True  
      when: ftp_ok.failed == True   
    
    # Tworze katalog sklepu    
    - name: Step 2
      file:
        path: "/usr/local/sklep{{ NRSKL }}"
        state: directory
        mode: 0755

    # Rozpakowywanie danych
    - name: Step 3
      unarchive:
        src: /tmp/nowysklepdino.11883.tgz
        dest: "/usr/local/sklep{{ NRSKL }}/"
        remote_src: yes
        extra_opts:
        - --strip=2

    
    # Tworzenie potrzebych katalogow    
    - name: Step 4
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0777'
      with_items:
        - "/usr/local/sklep{{ NRSKL }}/exporty/wydrukipdf"    
    
    - name: Step 5
      command: "mv /usr/local/sklep{{ NRSKL }}/cron.root /var/spool/cron/crontabs/root" 
      ignore_errors: yes

    # Sprawdzam link do sklepu  
    - name: Step 6
      stat:
        path: "/usr/local/sklep"
      register: link

    # Tworz link sklep  
    - name: Step 7
      file:
        src: "sklep{{ NRSKL }}"
        dest: "/usr/local/sklep"
        state: link
      when: link.stat.exists == False or link.stat.islnk == False

    - name: Step 8
      command: "grep SRC /usr/local/sklep{{ NRSKL }}/konfiguracja/.src"
      register: src

    - name: Step 9 
      set_fact:
        src_path: "{{ src.stdout.split('=')[1] }}"
        qsrc_path: "{{ src.stdout.split('=')[1] }}/qhm"

    # Tworze katalog zrodel 
    - name: Step 10 
      file:
        path: "{{ src_path }}"
        state: directory
        mode: 0755
 
    # Rozpakowuje zrodel
    - name: Step 11 
      unarchive:
        src: /usr/local/sklep{{ NRSKL }}/zrodla.tgz
        dest: "{{ src_path }}/"
        remote_src: yes

    # Sprawdzanie plikow konfiguracyjnych
    - name: Step 12 
      stat:
        path: "{{ item }}"
      with_items:
        - "/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
        - "/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat"
        - "{{ src_path }}/Makefile.local"  
      register: pliki_konf

    # Zmiana konfguracji zmienne.dat
    - name: Step 13
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(baza_serwera)(.*)', line: '\1\thm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(ceny_local)(.*)', line: '\1\thm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(gold_kod_obiektu)(.*)', line: '\1\t{{ KOD_GOLD }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(kdsk_kdserv_suffix)(.*)', line: '\1\t{{ NRSKL }}'}
      when: pliki_konf.results[0].stat.exists

    # Zmiana konfguracji parms.dat
    - name: Step 14
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat', regexp: '(NrSklep).*', line: '\1\t{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat', regexp: '(cli_serv).*', line: '\1\t{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat', regexp: '(nazwa_skl).*', line: '\1\tSklep DINO {{ NRSKL }}'}
      when: pliki_konf.results[1].stat.exists

    # Zmiana konfguracji Makefile
    - name: Step 15
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '{{ src_path }}/Makefile.local', regexp: '(SUFFIX=.*)', line: 'SUFFIX={{ NRSKL }}'}
        - {dest: '{{ src_path }}/Makefile.local', regexp: '(BINDIR=)(.*)', line: '\1/usr/local/sklep{{ NRSKL }}/bin/'}
      when: pliki_konf.results[2].stat.exists

    # Zmiana zmiennych 
    - name: Step 16
      replace:
        dest: /usr/local/waginew/konfiguracja/zmienne.dat
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - { regexp: '(baza)(.*)', line: '\1\thm{{ NRSKL }}' }

    # Pobieram nazwe bazy      
    - name: Step 17
      command: "grep baza_serwera /usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
      register: _mysql_hm

    # Pobieram nazwe bazy_2  
    - name: Step 18
      command: "grep ceny_serv /usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
      register: _mysql_hmcs

    - name: Step 19
      shell: "grep Database: /usr/local/sklep{{ NRSKL }}/schemah.dump | grep -o [[:digit:]]*[[:digit:]]"
      register: _nrskle_old

    # Zapisuje nazwe bazy dancyh   
    - name: Step 20
      set_fact:
        mysql_hm: "{{ _mysql_hm.stdout.split()[1] }}"
        mysql_hmcs: "{{ _mysql_hmcs.stdout.split()[1] }}"
        nrskl_old: "{{ _nrskle_old.stdout }}"

    # Zmiana baz
    - name: Step 21
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/usr/local/sklep{{ NRSKL }}/schemaw.sql', regexp: '(hm[0-9]*)', line: 'hm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/schemaw.sql', regexp: '(hm[0-9]*)', line: 'hm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/schemaw.sql', regexp: '{{ nrskl_old }}', line: '{{ NRSKL }}'}

    # Sprawdzanie czy bazy istnieja
    - name: Step 22
      mysql_variables:
        variable: datadir
      register: base_dir
      
    # Sprawdzanie czy bazy istnieje
    - name: Step 23
      stat:
        path: "{{ base_dir }}/{{ item }}"
      with_items:
        - "{{ mysql_hm }}"
        - "{{ mysql_hmcs }}"  
      register: bazki

    - fail:
        msg: "Baza danych {{ item.stat.path | basename }} juz istnieje"
      with_items:
        - "{{ bazki.results }}"
      when: item.stat.exists and item.stat.isdir

    # Tworzenie baz danych  
    - name: Step 24
      mysql_db:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ mysql_hm }}"
        - "{{ mysql_hmcs }}"  
        - raporty

    # Import danych do MySql-a     
    - name: Step 25
      mysql_db:
        name: "{{ item.baza }}"
        state: import
        target: "/usr/local/sklep{{ NRSKL }}/{{ item.plik }}"
        encoding: latin2
      with_items:
        - {baza: '{{ mysql_hm }}', plik: 'schemah.dump'}
        - {baza: '{{ mysql_hm }}', plik: 'schemaw.sql'}
        - {baza: '{{ mysql_hm }}', plik: 'tabele.dmp'}
        - {baza: '{{ mysql_hm }}', plik: 'synch.dmp'}
        - {baza: '{{ mysql_hm }}', plik: 'Pracownik11883.dmp'}
        - {baza: '{{ mysql_hmcs }}', plik: 'schemac.dump'}

    # Dodanie magazynu      
    - name: Step 26
      command: mysql "{{ mysql_hm }}" -e "INSERT INTO Magazyny (magazyn, sklep, symbolMag, opis, flaga, NrSklep, czas) VALUES (1,{{ NRSKL }},'podstawowy','',2,0,NOW());"
  
    - name: Step 27
      command: mysql "{{ mysql_hm }}" -e "UPDATE StanKasy2 set stan={{ NRSKL }} where idStanu='Numer Sklepu';"
     
    - name: Step 28
      command: mysql "{{ mysql_hm }}" -e "update StanKasy2 set NrSklep={{ NRSKL }} where NrSklep <> 0;"

    - name: Step 29
      command: mysql "{{ mysql_hm }}" -e "delete from StanKasy2 where idStanu='opt_secure_key';"

    - name: Step 30
      command: mysql "{{ mysql_hm }}" -e "delete from StanKasy2 where (idStanu='term_con_string') or (idStanu='Wspolpraca z terminalem platniczym');"
      ignore_errors: true   

    - name: Step 31
      command: mysql "{{ mysql_hm }}" -e "UPDATE SklepCenyStany set NrSklep={{ NRSKL }};"

    # Szukanie plikow pep*
    - name: Step 32
      find:
        paths: "/usr/local/sklep{{ NRSKL }}/konfiguracja/"
        patterns: 'pep_*'
        recurse: no
      register: pep

    # Usuwanie plikow pep.dat  
    - name: Step 33
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ pep.files }}"

    - name: Step 34
      replace:
        dest: "/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
        regexp: '(konto_bankowe)(\t.*)'
        replace: '\1'

    # Dodanie PATH    
    - name: Step 35
      lineinfile:
        path: /etc/environment
        regexp: 'PATH=(["])((?!.*?/opt/mssql-tools/bin).*?)(["])$'
        line: 'PATH=\1\2:/opt/mssql-tools/bin\3'
        backrefs: yes
   
    # Wylaczanie rc-firewall
    - name: Step 36
      systemd:
        name: rc-firewall
        enabled: no
    # Wylaczanie rc-firewall
    - name: Step 37
      file:
        path: /etc/rc.firewall
        mode: a-x

    # Kompilacja Hipermarketu
    - name: Step 38
      shell: make -C "{{ src_path }}/src" clean all
      register: kmp
      ignore_errors: yes
      
    # Zmiana sciezki
    - name: Step 39
      replace:
        dest: "{{ qsrc_path }}/proj_local.pri"
        regexp: '(KD_INCLUDES_PATH=).*'
        replace: '\1{{ src_path }}/src'

    - name: Step 40
      shell:
        chdir: "{{ qsrc_path }}"
        cmd: scripts/qmake_opt_mariadb.sh debug
      when: kmp.failed == False  

    # Kompilacja QHM
    - name: Step 41
      shell: make -C "{{ qsrc_path }}" clean
      register: kmp_qhm
      ignore_errors: yes
      when: kmp.failed == False
  
    # Kompilacja QHM  
    - name: Step 42 
      shell: make -C "{{ qsrc_path }}" -j4
      register: kmp_qhm
      ignore_errors: yes
      when: kmp.failed == False

    # Instalacja QHM  
    - name: Step 43
      shell: make -C "{{ qsrc_path }}" install
      ignore_errors: yes
      when: kmp_qhm.failed == False

    # Inicjacja tcp_client-a
    - name: Step 44
      shell: "cd /usr/local/sklep{{ NRSKL }}; bin/tcp_client -zacznijod{{ ansible_date_time.date }}"
      ignore_errors: yes
      when: kmp.failed == False

    # Start kdserv-a  
    - name: Step 45
      shell: "cd /usr/local/sklep{{ NRSKL }}; bin/odpalaj bin/kdserv{{ NRSKL }} 1>/dev/null 2>/dev/null &"
      when: kmp.failed == False
   
    # Usuwam skrot instalacji HM  
    - name: Step 46
      file:
        path: /home/sklep/Pulpit/HM.desktop
        state: absent
      when: kmp_qhm.failed == False

    # Skroty na pulpicie  
    - name: Step 47
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: sklep
        group: sklep
        mode: '0777'
      with_items:
        - {src: 'templates/Hipermarket.desktop.j2', dest: '/home/sklep/Pulpit/Hipermarket.desktop'} 
        - {src: 'templates/QHipermarket_kasjer.desktop.j2', dest: '/home/sklep/Pulpit/QHipermarket_kasjer.desktop'} 
      when: kmp_qhm.failed == False 

    # Skrypty  
    - name: Step 48
      shell:
      args:
        executable: /bin/bash
        chdir: "/usr/local/sklep{{ NRSKL }}"
        cmd: "{{ item }}"
      with_items:
       - "skrypty/Sql/CreateTablesFaktury zaloz"
       - "skrypty/Sql/CreateTablesFaktury typy"
       - "skrypty/Sql/CreateTablesUrzadzenia zaloz"
       - "skrypty/Sql/CreateTablesDinoRaps zaloz"  
       - "bin/instaluj -zalozadmina"
       - "bin/restartserv"
       - "bin/kd -batch DocOpisImport2SQL -z" 
        #- "skrypty.loc/import_GOLD_to_POS"
      ignore_errors: yes
      no_log: True

    
    - set_fact:
        NET: "{{ NETWORK | regex_replace('(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)(.*)','\\1') }}"

    # rc.local, samba itp    
    - name: Step 49
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      no_log: True
      with_items:
        - {dest: '/etc/rc.local', regexp: '^#(cd /usr/local.*)', line: '\1'}
        - {dest: '/etc/rc.local', regexp: '#!/bin/sh -e', line: '#!/bin/bash'}
        - {dest: '/etc/rc.local', regexp: '^#(NR=.*)', line: '\1'}
        - {dest: '/etc/rc.local', regexp: '^#(\./bin.*)', line: '\1'}
        - {dest: '/var/spool/cron/crontabs/root', regexp: '(.*export_POS_to_GOLD.*)' , line: '#\1' }  
        - {dest: '/etc/samba/smb.conf', regexp: '(^hosts allow.*)', line: '\1 {{ NET }}'}
        - {dest: '/home/quicksell/config.properties', regexp: '(^dbName=)(.*)', line: '\1hm{{ NRSKL }}'}
        - {dest: '/home/sklep/Pulpit/GOLD_PROD.jnlp', regexp: '10.80.0.10:8082', line: '10.80.0.10:{{ PORT_GOLD }}' }
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/pricechecker.dat', regexp: '(adres_podsieci)(.*)', line: '\1={{ NETWORK }}' }
        - {dest: '/lib/systemd/system/waga_daemon.service', regexp: '(ExecStart=)(.*)', line: '\1/usr/local/wagi/bin/waga_daemon --nonstop' }

    # Usuwanie z clear.pz1      
    - name: Step 50
      lineinfile:
        path: "/usr/local/sklep{{ NRSKL }}/skrypty.loc/clear.pz1"
        regexp: ".*przygotuj_nowy_sklep.sh"
        state: absent
 
    # Dodanie uzytkownika do mysql-a
    - name: Step 51
      command: mysql mysql -e "CREATE USER 'mmerena'@'10.124.%' IDENTIFIED BY PASSWORD '*26D6CE70638EC05BF0416DDADBC44035BCE21E0B';"
      no_log: True

    # Dodanie uprawnien do MySql
    - name: Step 52
      command: mysql mysql -e "{{ item }}"
      no_log: True
      with_items:
        - "GRANT SELECT ON dino_raps.* TO 'mmerena'@'10.122.%';" 
        - "GRANT SELECT ON dino_raps.* TO 'mmerena'@'10.80.%';"
        - "GRANT SELECT ON dino_raps.* TO 'mmerena'@'10.124.%';" 
        - "GRANT SELECT on {{ mysql_hm }}.FakturySymbol to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.FakturySymbol to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.FakturyNaglowki to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.FakturyNaglowki to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.ParagonyNaglowki to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.ParagonyNaglowki to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.Kasy to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.Kasy to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.GOLDIdentyfikatoryTransakcji to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.GOLDIdentyfikatoryTransakcji to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.Pracownicy to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.Pracownicy to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.PracownikSklep to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.PracownikSklep to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.InfoZwrot to 'mmerena'@'10.80.%';"
        - "GRANT SELECT on {{ mysql_hm }}.InfoZwrot to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.FakturySymbol to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.FakturyNaglowki to 'mmerena'@'10.122.%';"
        - "GRANT SELECT on {{ mysql_hm }}.FakturyNaglowki to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.ParagonyNaglowki to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.Kasy to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.GOLDIdentyfikatoryTransakcji to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.Pracownicy to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.PracownikSklep to 'mmerena'@'10.124.%';"
        - "GRANT SELECT on {{ mysql_hm }}.InfoZwrot to 'mmerena'@'10.124.%';"


    # Grant do MySql-a    
    - name: Step 53
      mysql_user:
        name: root
        host: "{{ NETWORK | regex_replace('(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)(.*)','\\1') }}%"
        priv: '*.*:ALL'
        state: present

    # host.allow
    - name: Step 54
      lineinfile:
        path: /etc/hosts.allow
        line: "ALL:{{ NETWORK | regex_replace('(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)(.*)','\\1') }}" 
   

    # Pobranie wag z serwera wewnetrznego
    - name: Step 55
      get_url:
        url: ftp://dinospexp:dinospexp123@10.80.0.14/wagi.tar.bz2
        dest: /tmp/
        force: yes
        timeout: 60
      no_log: True
      ignore_errors: True
      register: wagi_ok

    # Pobranie wag z naszego serwera
    - name: Step 56
      get_url:
        url: ftp://dinoftp:dInO.F^9031gG@dedyk-new.netis.pl/wagi.tar.bz2
        dest: /tmp/
        force: yes
        timeout: 60
      no_log: True
      ignore_errors: True
      when: wagi_ok.failed == True

    - name: Step 57
      unarchive:
        src: /tmp/wagi.tar.bz2
        dest: /usr/local/
      ignore_errors: yes

    - name: Step 58
      command: make clean all
      args:
        chdir: /usr/local/waginew/src
      ignore_errors: yes

    - name: Step 59
      command: make waga_daemon
      args:
        chdir: /usr/local/waginew/src
      ignore_errors: yes

    # Wylaczenie VPN 
    - name: Step 60
      systemd:
        state: stopped   
        enabled: no
        name: "openvpn@client.2.101"

    # Usuniecie config-a VPN
    - name: Step 61
      file:
        path: /etc/openvpn/client.2.101.conf
        state: absent

    # Usuwanie skryptu instalacyjnego
    - name: Step 62
      file:
        path: /home/sklep/.installHM.sh
        state: absent
    
    - name: Step 63
      systemd:
        daemon_reload: yes
        state: restarted
        name: waga_daemon.service

    # Skrypt kolejka 
    - name: Step 64
      shell:
      args:
        executable: /bin/bash
        chdir: "/usr/local/sklep{{ NRSKL }}"
        cmd: skrypty/kolejka -nodialog
      ignore_errors: yes

    # sudo
    - name: Step 65
      lineinfile:
        path: /etc/sudoers
        regexp: '^sklep ALL.*'
        state: absent

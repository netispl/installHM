---
- hosts: local
  remote_user: ansiblenet

 # vars_prompt:

  #  - name: NRSKL
   #   prompt: "Podaj numer sklepu"
   #   private: no

   # - name: KOD_GOLD
   #   prompt: "Podaj kod sklepu w systemie GOLD"
   #   private: no

   # - name: NETWORK
    #  prompt: "Podaj siec lokalna w jakiej bedzie dzialal sklep np. 10.122.252.0"
    #  private: no


  tasks:


    - assert:
        that:
          - "{{ NRSKL }} < 100000 "
          - "{{ NRSKL }} > 0 "
        quiet: true    
        msg: "NIEPOPRAWNY NUMER SKLEPU"
        
  
    - assert:
        that:
          - "{{ KOD_GOLD }} < 100000 "
          - "{{ KOD_GOLD }} > 0 "
        quiet: true    
        msg: "NIEPOPRAWNY NUMER W SYSTEMIE GOLD"


    - name: Sprawdzam adres sieci
      fail: msg="NIEPOPRAWNY ADRES IP"
      when: NETWORK is not match('\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')

    
    - name: Sprawdzam adres sieci
      fail: msg="NIEPOPRAWNY ADRES IP" 
      when: NETWORK | ipaddr('bool') == False


    - name: Sprawdzanie system operacyjny
      fail: msg="WYMAGANY SYSTEM OPERACYJNY TO UBUNTU 18.04 x64"
      when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version != "18" and ansible_architecture != "x86_64"


    - name: Sprawdzam katalog sklepu
      stat:
        path: "/usr/local/sklep{{ NRSKL }}"
      register: dir_s

    - fail:
        msg: "KATALOG SKLEPU ISTNIEJE"
      when: dir_s.stat.exists and dir_s.stat.isdir


    - name: Pobranie wzorca sklepu
      get_url:
        url: ftp://dinoftp:dInO.F^9031gG@dedyk-new.netis.pl/nowysklepdino.tgz
        dest: /tmp/
        force: yes
        timeout: 60

    - name: Tworze katalog sklepu
      file:
        path: "/usr/local/sklep{{ NRSKL }}"
        state: directory
        mode: 0755


    - name: Rozpakowuje sklep
      unarchive:
        src: /tmp/nowysklepdino.tgz
        dest: "/usr/local/sklep{{ NRSKL }}/"
        remote_src: yes
        extra_opts:
        - --strip=2
    
    - name: crontab
      command: "mv /usr/local/sklep{{ NRSKL }}/cron.root /var/spool/cron/crontabs/root" 
      ignore_errors: yes

    - name: Sprawdzam link do sklepu
      stat:
        path: "/usr/local/sklep"
      register: link

    - name: Tworz link sklep
      file:
        src: "sklep{{ NRSKL }}"
        dest: "/usr/local/sklep"
        state: link
      when: link.stat.exists == False or link.stat.islnk == False

    - name: Pobieram
      command: "grep SRC /usr/local/sklep{{ NRSKL }}/konfiguracja/.src"
      register: src
      tags: aa

    - name: Zapisuje 
      set_fact:
        src_path: "{{ src.stdout.split('=')[1] }}"
        qsrc_path: "{{ src.stdout.split('=')[1] }}/qhm"
      tags: aa

    
    - name: Tworze katalog zrodel
      file:
        path: "{{ src_path }}"
        state: directory
        mode: 0755

 
    - name: Rozpakowuje zrodel
      unarchive:
        src: /usr/local/sklep{{ NRSKL }}/zrodla.tgz
        dest: "{{ src_path }}/"
        remote_src: yes


    - name: Sprawdzanie plikow konfiguracyjnych
      stat:
        path: "{{ item }}"
      with_items:
        - "/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
        - "/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat"
        - "{{ src_path }}/Makefile.local"  
      register: pliki_konf


    - name: Zmiana konfguracji zmienne.dat
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(baza_serwera)(.*)', line: '\1\thm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(ceny_local)(.*)', line: '\1\thm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(gold_kod_obiektu)(.*)', line: '\1\t{{ KOD_GOLD }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(path_to_firma)(.*)', line: '\1\t/usr/local/sklep{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat', regexp: '(kdsk_kdserv_suffix)(.*)', line: '\1\t{{ NRSKL }}'}
      when: pliki_konf.results[0].stat.exists


    - name: Zmiana konfguracji parms.dat
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat', regexp: '(NrSklep).*', line: '\1\t{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat', regexp: '(cli_serv).*', line: '\1\t{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/konfiguracja/parms.dat', regexp: '(nazwa_skl).*', line: '\1\tSklep DINO {{ NRSKL }}'}
      when: pliki_konf.results[1].stat.exists


    - name: Zmiana konfguracji Makefile
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '{{ src_path }}/Makefile.local', regexp: '(SUFFIX=.*)', line: 'SUFFIX={{ NRSKL }}'}
        - {dest: '{{ src_path }}/Makefile.local', regexp: '(BINDIR=)(.*)', line: '\1/usr/local/sklep{{ NRSKL }}/bin/'}
      when: pliki_konf.results[2].stat.exists

    - name: Pobieram nazwe bazy
      command: "grep baza_serwera /usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
      register: _mysql_hm

    - name: Pobieram nazwe bazy_2
      command: "grep ceny_serv /usr/local/sklep{{ NRSKL }}/konfiguracja/zmienne.dat"
      register: _mysql_hmcs

    - name: Stary numer
      shell: "grep Database: /usr/local/sklep{{ NRSKL }}/schemah.dump | grep -o [[:digit:]]*[[:digit:]]"
      register: _nrskle_old


    - name: Zapisuje nazwe bazy dancyh
      set_fact:
        mysql_hm: "{{ _mysql_hm.stdout.split()[1] }}"
        mysql_hmcs: "{{ _mysql_hmcs.stdout.split()[1] }}"
        nrskl_old: "{{ _nrskle_old.stdout }}"

    - name: Zmiena baz
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/usr/local/sklep{{ NRSKL }}/schemaw.sql', regexp: '(hm[0-9]*)', line: 'hm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/schemaw.sql', regexp: '(hm[0-9]*)', line: 'hm{{ NRSKL }}'}
        - {dest: '/usr/local/sklep{{ NRSKL }}/schemaw.sql', regexp: '{{ nrskl_old }}', line: '{{ NRSKL }}'}


    - name: Sprawdzanie czy bazy istnieja
      mysql_variables:
        variable: datadir
      register: base_dir

    - name: Sprawdzanie czy baza istnieje
      stat:
        path: "{{ base_dir }}/{{ item }}"
      with_items:
        - "{{ mysql_hm }}"
        - "{{ mysql_hmcs }}"  
      register: bazki

    - fail:
        msg: "Baza danych {{ item.stat.path | basename }} juz istnieje"
      with_items:
        - "{{ bazki.results }}"
      when: item.stat.exists and item.stat.isdir

    - name: Tworzenie baz danych
      mysql_db:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ mysql_hm }}"
        - "{{ mysql_hmcs }}"  

    - name: Import danych do MySql-a
      mysql_db:
        name: "{{ item.baza }}"
        state: import
        target: "/usr/local/sklep{{ NRSKL }}/{{ item.plik }}"
        encoding: latin2
      with_items:
        - {baza: '{{ mysql_hm }}', plik: 'schemah.dump'}
        - {baza: '{{ mysql_hm }}', plik: 'schemaw.sql'}
        - {baza: '{{ mysql_hm }}', plik: 'tabele.dmp'}
        - {baza: '{{ mysql_hm }}', plik: 'synch.dmp'}
        - {baza: '{{ mysql_hmcs }}', plik: 'schemac.dump'}

    - name: Dodanie magazynu
      command: mysql "{{ mysql_hm }}" -e "INSERT INTO Magazyny (magazyn, sklep, symbolMag, opis, flaga, NrSklep, czas) VALUES (1,{{ NRSKL }},'podstawowy','',2,0,NOW());"
  
    - name: zmiana
      command: mysql "{{ mysql_hm }}" -e "UPDATE StanKasy2 set stan={{ NRSKL }} where idStanu='Numer Sklepu';"

    - name: zmiana
      command: mysql "{{ mysql_hm }}" -e "UPDATE SklepCenyStany set NrSklep={{ NRSKL }};"


    
    - name: Kompilacja Hipermarketu
      shell: make -C "{{ src_path }}/src" clean all
      register: kmp
      ignore_errors: yes


    - name: Zmiana sciezki
      replace:
        dest: "{{ qsrc_path }}/proj_local.pri"
        regexp: '(KD_INCLUDES_PATH=).*'
        replace: '\1{{ src_path }}/src'


    - name: Skrypt
      shell:
        chdir: "{{ qsrc_path }}"
        cmd: scripts/qmake_opt_mariadb.sh debug
      when: kmp.failed == False  
      tags: aa

    - name: Kompilacja QHM
      shell: make -C "{{ qsrc_path }}" clean
      register: kmp_qhm
      ignore_errors: yes
      when: kmp.failed == False
      tags: aa
   
    - name: Kompilacja QHM
      shell: make -C "{{ qsrc_path }}" -j4
      register: kmp_qhm
      ignore_errors: yes
      when: kmp.failed == False
      tags: aa

    - name: Instalacja QHM
      shell: make -C "{{ qsrc_path }}" install
      ignore_errors: yes
      when: kmp_qhm.failed == False
      
    - name: Start kdserv-a
      shell: "cd /usr/local/sklep{{ NRSKL }}; bin/odpalaj bin/kdserv{{ NRSKL }} 1>/dev/null 2>/dev/null &"
      when: kmp.failed == Fals
    
    - name: Usuwam skrot instalacji HM
      file:
        path: /home/sklep/Pulpit/HM.desktop
        state: absent
      when: kmp_qhm.failed == False

    - name: Skroty na pulpicie
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: sklep
        group: sklep
        mode: '0777'
      with_items:
        - {src: 'templates/Hipermarket.desktop.j2', dest: '/home/sklep/Pulpit/Hipermarket.desktop'} 
        - {src: 'templates/QHipermarket_kasjer.desktop.j2', dest: '/home/sklep/Pulpit/QHipermarket_kasjer.desktop'} 
      when: kmp_qhm.failed == False 

    - name: rc.local
      replace:
        dest: /etc/rc.local
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {regexp: '^#(cd /usr/local.*)', line: '\1'}
        - {regexp: '^#(NR=.*)', line: '\1'}
        - {regexp: '^#(./bin.*)', line: '\1'}
      when: kmp.failed == False


    - name: Skrypty
      shell:
      args:
        executable: /bin/bash
        chdir: "/usr/local/sklep{{ NRSKL }}"
        cmd: "{{ item }}"
      with_items:
       - "skrypty/Sql/CreateTablesFaktury zaloz"
       - "skrypty/Sql/CreateTablesFaktury typy"
       - "skrypty/Sql/CreateTablesUrzadzenia zaloz" 
       - "bin/instaluj -zalozadmina"
       - "bin/restartserv"
       - "bin/kd -batch DocOpisImport2SQL -z"  

    
    - set_fact:
        NET: "{{ NETWORK | regex_replace('(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)(.*)','\\1') }}"
      tags: nn

    - name: samba itp
      replace:
        dest: "{{ item.dest }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - {dest: '/etc/rc.local', regexp: '^#(cd /usr/local.*)', line: '\1'}
        - {dest: '/etc/rc.local', regexp: '^#(NR=.*)', line: '\1'}
        - {dest: '/etc/rc.local', regexp: '^#(./bin.*)', line: '\1'}
        - {dest: '/etc/samba/smb.conf', regexp: '(^hosts allow.*)', line: '\1 {{ NET }}'}
        - {dest: '/home/quicksell/config.properties', regexp: '(^dbName=)(.*)', line: '\1hm{{ NRSKL }}'}
          #      when: kmp.failed == False
      tags: nn

    - name: host.allow
      lineinfile:
        path: /etc/hosts.allow
        line: "{{ NETWORK | regex_replace('(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.)(.*)','\\1') }}" 
      tags: nn  
          
    

    - pause:
         prompt: Nacisnij ENTER
